#include <stdio.h>
#include <assert.h>
#include <string.h>
#include <stdlib.h>

#include "const_in_okinator.h"
#include "definition_and_comparison.h"

static okinator_error_t print_definition_node (way_t* ptr_way);
static okinator_error_t write_in_way 		  (way_t* ptr_way);
static okinator_error_t print_comparison      (way_t* ptr_way_1, way_t* ptr_way_2);

//---------------------------------------------------------------------------------------------------------------------------

okinator_error_t find_position_node (node_t* node, char* target_str, node_t** ptr_target_node)
{
	assert (node);
	assert (ptr_target_node);
	assert (target_str);

	if (*ptr_target_node == NULL)
	{
		if (strcmp(node -> data, target_str) == 0)
		{
			*ptr_target_node = node;
		}
		else
		{
			if (node -> left != NULL)
			{
				find_position_node (node -> left, target_str, ptr_target_node);
			}

			if (node -> right != NULL)
			{
				find_position_node (node -> right, target_str, ptr_target_node);
			}
		}
	}

	return NOT_ERROR;
}

//---------------------------------------------------------------------------------------------------------------------------

static okinator_error_t create_way (node_t* node, way_t* ptr_way)
{
	assert (ptr_way);

	ptr_way -> way_to_target_node = (node_t**) calloc (SIZE_WAY_TO_TAGET_NODE, sizeof (node_t*));
	if (ptr_way -> way_to_target_node == NULL) {printf ("%s:%d Not memory for calloc to way_to_target_node\n", __FILE__, __LINE__); return NOT_MEMORY_TARGET;}

	ptr_way -> index_on_way = 0;
	ptr_way -> size_way     = SIZE_WAY_TO_TAGET_NODE;

	find_position_node (node, ptr_way -> target_str, &(ptr_way -> target_node));

	okinator_error_t status = write_in_way (ptr_way);
	if (status != NOT_ERROR) {return status;}

	ptr_way -> index_on_way -= 1;

	return status;
}

//----------------------------------------------------------------------------------------------------------------------------------

okinator_error_t create_definition_node (node_t* node, char* target_str)
{
	assert (node);
	assert (target_str);

	node_t* target_node = NULL;

	way_t way = {};
	way.target_str = target_str;
	
	printf ("%s - ", target_str);

	create_way (node, &way);
	
	print_definition_node (&way);

	free (way.way_to_target_node);

	return NOT_ERROR;
}

static okinator_error_t print_definition_node (way_t* ptr_way)
{
	assert (way_to_target_node);
	assert (ptr_index_on_way);

	if (*ptr_index_on_way != 0)
	{
		if ((way_to_target_node[*ptr_index_on_way]) -> right == way_to_target_node[(*ptr_index_on_way) - 1])
		{
			printf ("не ");
		}

		printf ("%s, ", (way_to_target_node[*ptr_index_on_way]) -> data);

		*ptr_index_on_way -= 1;

		print_definition_node (way_to_target_node, ptr_index_on_way);
	}
	else 
	{
		printf ("%s\n", (way_to_target_node[(*ptr_index_on_way) + 1]) -> data);
	}

	return NOT_ERROR;
}

//---------------------------------------------------------------------------------------------------------------------------------------------------------

static okinator_error_t write_in_way (node_t* target_node, node_t** way_to_target_node, size_t* ptr_index_on_way, size_t* ptr_size_way)
{
	assert (target_node);
	assert (way_to_target_node);
	assert (ptr_index_on_way);
	assert (ptr_size_way);

	okinator_error_t status = NOT_ERROR;

	way_to_target_node[*ptr_index_on_way] = target_node;

	*ptr_index_on_way += 1;

	if (*ptr_index_on_way == *ptr_size_way)
	{
		*ptr_size_way *= 2;

		way_to_target_node = (node_t**) realloc (way_to_target_node, *ptr_size_way);
		if (way_to_target_node == NULL) {printf ("%s:%d Not memory for realloc to way_to_target_node\n", __FILE__, __LINE__); return NOT_MEMORY_TARGET;}
	}

	if (target_node -> parent != NULL)
	{
		status = write_in_way (target_node -> parent, way_to_target_node, ptr_index_on_way, ptr_size_way);
	}

	return status;
}

//---------------------------------------------------------------------------------------------------------------------------

okinator_error_t compare_two_nodes (node_t* node, char* target_str_1, char* target_str_2)
{
	assert (node);
	assert (target_str_1);
	assert (target_str_2);

	node_t** way_to_target_node_1 = (node_t**) calloc (SIZE_WAY_TO_TAGET_NODE, sizeof (node_t*));
	if (way_to_target_node_1 == NULL) {printf ("%s:%d Not memory for calloc to way_to_target_node_1\n", __FILE__, __LINE__); return NOT_MEMORY_TARGET;}

	size_t index_on_way_1 = 0;
	size_t size_way_1     = SIZE_WAY_TO_TAGET_NODE;

	node_t* target_node_1 = NULL;

	find_position_node (node, target_str_1, &target_node_1);

	okinator_error_t status = write_in_way (target_node_1, way_to_target_node_1, &index_on_way_1, &size_way_1);
	if (status != NOT_ERROR) {return status;}

	index_on_way_1 -= 1;

	//---------------------------------------------------------

	node_t** way_to_target_node_2 = (node_t**) calloc (SIZE_WAY_TO_TAGET_NODE, sizeof (node_t*));
	if (way_to_target_node_2 == NULL) {printf ("%s:%d Not memory for calloc to way_to_target_node_2\n", __FILE__, __LINE__); return NOT_MEMORY_TARGET;}

	size_t index_on_way_2 = 0;
	size_t size_way_2     = SIZE_WAY_TO_TAGET_NODE;

	node_t* target_node_2 = NULL;

	find_position_node (node, target_str_2, &target_node_2);

	status = write_in_way (target_node_2, way_to_target_node_2, &index_on_way_2, &size_way_2);
	if (status != NOT_ERROR) {return status;}

	index_on_way_2 -= 1;

	//---------------------------------------------------------

	print_comparison (way_to_target_node_1, &index_on_way_1, target_str_1, way_to_target_node_2, &index_on_way_2, target_str_2);

	return status;
}

static okinator_error_t print_comparison (node_t** way_to_target_node_1, size_t* ptr_index_on_way_1, char* target_str_1, node_t** way_to_target_node_2, size_t* ptr_index_on_way_2, char* target_str_2)
{
	assert (way_to_target_node_1);
	assert (ptr_index_on_way_1);
	assert (target_str_1);
	assert (way_to_target_node_2);
	assert (ptr_index_on_way_2);
	assert (target_str_2);

	printf ("%s и %s похожи тем, что они оба - ", target_str_1, target_str_2);

	while (way_to_target_node_1[(*ptr_index_on_way_1) - 1] == way_to_target_node_2[(*ptr_index_on_way_2) - 1])
	{
		if ((way_to_target_node_1[*ptr_index_on_way_1]) -> right == way_to_target_node_1[(*ptr_index_on_way_1) - 1])
		{
			printf ("не ");
		}

		printf ("%s, ", (way_to_target_node_1[*ptr_index_on_way_1]) -> data);

		*ptr_index_on_way_1 -= 1;
		*ptr_index_on_way_2 -= 1;
	}

	printf ("но %s - ", target_str_1);

	while (*ptr_index_on_way_1 > 0)
	{
		if ((way_to_target_node_1[*ptr_index_on_way_1]) -> right == way_to_target_node_1[(*ptr_index_on_way_1) - 1])
		{
			printf ("не ");
		}
		
		printf ("%s, ", (way_to_target_node_1[*ptr_index_on_way_1]) -> data);

		*ptr_index_on_way_1 -= 1;
	}

	printf ("а %s - ", target_str_2);

	while (*ptr_index_on_way_2 > 0)
	{
		if ((way_to_target_node_2[*ptr_index_on_way_2]) -> right == way_to_target_node_2[(*ptr_index_on_way_2) - 1])
		{
			printf ("не ");
		}

		printf ("%s, ", (way_to_target_node_2[*ptr_index_on_way_2]) -> data);

		*ptr_index_on_way_2 -= 1;
	}

	printf ("\n");

	return NOT_ERROR;
}